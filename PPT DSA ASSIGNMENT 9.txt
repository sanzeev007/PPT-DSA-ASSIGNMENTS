QUESTION 1

class SolutionPowerTwo {
 
   static boolean isPowerOfTwo(int n)
    {
        if (n == 0)
            return false;
 
        while (n != 1) {
            if (n % 2 != 0)
                return false;
            n = n / 2;
        }
        return true;
    }
 





QUESTION 2

class SumNaturalNumber{
 
    static int findSum(int n)
    {
        int sum = 0;
        for (int x = 1; x <= n; x++)
            sum = sum + x;
        return sum;
    }






QUESTION 3

class Factorial {
 
   static int factorial(int n)
    {
 
        if (n == 0 || n == 1)
            return 1;

 return n * factorial(n - 1);
    }







QUESTION 4

class Solution {
    private double binaryExp(double x, long n) {
        if (n == 0) {
            return 1;
        }

     if (n < 0) {
            n = -1 * n;
            x = 1.0 / x;
        }

     double result = 1;
        while (n != 0) {
           
            if (n % 2 == 1) {
                result = result * x;
                n -= 1;
            }
          
            x = x * x;
            n = n / 2;
        }
        return result;
    }

    public double myPow(double x, int n) {
        return binaryExp(x, (long) n);
    }
}






QUESTION 5

class MaximumElement {
     
    // function to return maximum element using recursion
    public static int findMaxRec(int A[], int n)
    {
  	 if(n == 1)
        	 return A[0];
         
        return Math.max(A[n-1], findMaxRec(A, n-1));
    }






QUESTION 6

public class ArithmaticProgression {
	public static void main(String[] args) {
		int a = 2;
		int d = 1;
		int n = 5;

		int nthTerm = a;
		for (int i = 1; i < n; i++) {
			nthTerm += d;
		}
		System.out.println("The " + n + "th term of the series is: " + nthTerm);
	}
}








QUESTION 7

public class PermutationCombination {
 
 static void printPermutn(String str, String ans)
    {
 
       if (str.length() == 0) {
            System.out.print(ans + " ");
            return;
        }
 
        for (int i = 0; i < str.length(); i++) {
 
         char ch = str.charAt(i);
 
            String ros = str.substring(0, i) +
                        str.substring(i + 1);
 
           printPermutn(ros, ans + ch);
        }
    }









QUESTION 8

public class ProductArrays
{
    static int arr[] = {1, 2, 3, 4, 5, 6};
     
  
    static int multiply(int a[], int n)
    {
       
        if (n == 0)
            return(a[n]);
        else
            return (a[n] * multiply(a, n - 1));
    }