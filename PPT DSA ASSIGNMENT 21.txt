QUESTION 1



class Node {
	int data;
	Node left, right;

	public Node(int d)
	{
		data = d;
		left = right = null;
	}
}

class BinaryTree {

	Node root;

	int getLevelUtil(Node node, int data, int level)
	{
		if (node == null)
			return 0;

		if (node.data == data)
			return level;

		int downlevel= getLevelUtil(node.left, data, level + 1);
		if (downlevel != 0)
			return downlevel;

		downlevel= getLevelUtil(node.right, data, level + 1);
		return downlevel;
	}

	int getLevel(Node node, int data)
	{
		return getLevelUtil(node, data, 1);
	}

	public static void main(String[] args)
	{
		BinaryTree tree = new BinaryTree();

		tree.root = new Node(3);
		tree.root.left = new Node(2);
		tree.root.right = new Node(5);
		tree.root.left.left = new Node(1);
		tree.root.left.right = new Node(4);
		for (int x = 1; x <= 5; x++) {
			int level = tree.getLevel(tree.root, x);
			if (level != 0)
				System.out.println("Level of " + x + " is "+ tree.getLevel(tree.root, x));
			else
				System.out.println(x + " is not present in tree");
		}
	}
}










QUESTION 2




public class Solution {

	public static class Node {
		int value;
		Node left;
		Node right;

		public Node(int value) { this.value = value; }
	}
	
	public static int ans;
	
	public static int _findDistance(Node root, int n1, int n2)
	{
		if (root == null) return 0;
		int left = _findDistance(root.left, n1, n2);
		int right = _findDistance(root.right, n1, n2);
		
		if (root.value == n1 || root.value == n2)
		{
			
			if (left != 0 || right != 0)
			{
				ans = Math.max(left, right);
				return 0;
			}
			else
				return 1;
		}
		
		else if (left != 0 && right != 0)
		{
			ans = left + right;
			return 0;
		}
		
		else if (left != 0 || right != 0)
			
			return Math.max(left, right) + 1;
		
		return 0;
	}
	
	public static int findDistance(Node root, int n1, int n2)
	{
		ans = 0;
		_findDistance(root, n1, n2);
		return ans;
	}

}







QUESTION 3






class Node
{
	int data;
	Node left, right;

	public Node(int data)
	{
		this.data = data;
		left = right = null;
	}
}

class BinaryTree
{
	Node root;
	Node head;
	static Node prev = null;

	void BinaryTree2DoubleLinkedList(Node root)
	{
		
		if (root == null)
			return;

		BinaryTree2DoubleLinkedList(root.left);

		
		if (prev == null)
			head = root;
		else
		{
			root.left = prev;
			prev.right = root;
		}
		prev = root;

		
		BinaryTree2DoubleLinkedList(root.right);
	}

	
	void printList(Node node)
	{
		while (node != null)
		{
			System.out.print(node.data + " ");
			node = node.right;
		}
	}

}













QUESTION 4




class Node
{
    int data;
    Node left, right, nextRight;
  
    Node(int item)
    {
        data = item;
        left = right = nextRight = null;
    }
}
  
class BinaryTree
{
    Node root;
  
    void connectRecur(Node p)
    {
        // Base case
        if (p == null)
            return;
  
        if (p.nextRight != null)
            connectRecur(p.nextRight);
  
   
        if (p.left != null)
        {
            if (p.right != null)
            {
                p.left.nextRight = p.right;
                p.right.nextRight = getNextRight(p);
            }
            else
                p.left.nextRight = getNextRight(p);
  
            connectRecur(p.left);
        }
   
        else if (p.right != null)
        {
            p.right.nextRight = getNextRight(p);
            connectRecur(p.right);
        }
        else
            connectRecur(getNextRight(p));
    }
  
    Node getNextRight(Node p)
    {
        Node temp = p.nextRight;
  
        while (temp != null)
        {
            if (temp.left != null)
                return temp.left;
            if (temp.right != null)
                return temp.right;
            temp = temp.nextRight;
        }
  
        return null;
    }
  


