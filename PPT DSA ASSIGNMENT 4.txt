QUESTION 1

class FindCommon {
void findCommon(int ar1[], int ar2[], int ar3[])
	{
	int i = 0, j = 0, k = 0;
	int n1 = ar1.length;
	int n2 = ar2.length;
	int n3 = ar3.length;

		int prev1, prev2, prev3;
	prev1 = prev2 = prev3 = Integer.MIN_VALUE;

		while (i < n1 && j < n2 && k < n3) {
	while (i < n1 && ar1[i] == prev1)
	i++;

	while (j < n2 && ar2[j] == prev2)
	j++;

	while (k < n3 && ar3[k] == prev3)
	k++;

	if (i < n1 && j < n2 && k < n3) {

				if (ar1[i] == ar2[j] && ar2[j] == ar3[k]) {
					System.out.print(ar1[i] + " ");
					prev1 = ar1[i];
					prev2 = ar2[j];
					prev3 = ar3[k];
					i++;
					j++;
					k++;
				}

				else if (ar1[i] < ar2[j]) {
					prev1 = ar1[i];
					i++;
				}

				else if (ar2[j] < ar3[k]) {
					prev2 = ar2[j];
					j++;
				}

				
				else {
					prev3 = ar3[k];
					k++;
				}
			}
		}
	}

	




QUESTION 2

class Solution {
    
    List<Integer> getElementsOnlyInFirstList(int[] nums1, int[] nums2) {
        Set<Integer> onlyInNums1 = new HashSet<> (); 
        Set<Integer> existsInNums2 = new HashSet<> (); 
        for (int num : nums2) {
            existsInNums2.add(num);
        }
        
       for (int num : nums1) {
            if (!existsInNums2.contains(num)) {
                onlyInNums1.add(num);
            }
        }
        
      return new ArrayList<>(onlyInNums1);
    }
    
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        return Arrays.asList(getElementsOnlyInFirstList(nums1, nums2), getElementsOnlyInFirstList(nums2, nums1));
    }
}






QUESTION 3

class Solution {
    public int[][] transpose(int[][] A) {
        int R = A.length, C = A[0].length;
        int[][] ans = new int[C][R];
        for (int r = 0; r < R; ++r)
            for (int c = 0; c < C; ++c) {
                ans[c][r] = A[r][c];
            }
        return ans;
    }
}






QUESTION 4

class Solution {
    final static int K = 10000;
    
    public int arrayPairSum(int[] nums) {
        
        int[] elementToCount = new int[2 * K + 1];
        for (int element : nums) {
            
            elementToCount[element + K]++;
        }
        
        
        int maxSum = 0;
        boolean isEvenIndex = true;
        for (int element = 0; element <= 2 * K; element++) {
            while (elementToCount[element] > 0) {
                maxSum += (isEvenIndex ? element - K : 0);
                isEvenIndex = !isEvenIndex;
               elementToCount[element]--;
            }
        }
        return maxSum;
    }
}








QUESTION 5

class Solution {
  public int arrangeCoins(int n) {
    long left = 0, right = n;
    long k, curr;
    while (left <= right) {
      k = left + (right - left) / 2;
      curr = k * (k + 1) / 2;

      if (curr == n) return (int)k;

      if (n < curr) {
        right = k - 1;
      } else {
        left = k + 1;
      }
    }
    return (int)right;
  }
}








QUESTION 6

class Solution {
    public int[] sortedSquares(int[] nums) {
        int left=0, right=nums.length-1;
        int ans[]= new int[nums.length];
        int k=nums.length-1;
        while(left<=right){
            int max=(Math.abs(nums[left])<Math.abs(nums[right])? nums[right]: nums[left]);
            if(max==nums[right])
                right--;
                else 
                    left++;
            ans[k]=max*max;
            k--;
        }
        return ans;
    }
}







QUESTION 7

class Solution {
    public int maxCount(int m, int n, int[][] ops) {
        int min_row = m;
        int min_col = n;
        for (int i=0; i<ops.length; i++){
            if (ops[i][0]<min_row) min_row=ops[i][0];
            if (ops[i][1]<min_col) min_col=ops[i][1];
        }        
        return min_row*min_col;
        
    }
}









QUESTION 8

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] result = new int[2 * n];
        for (int i = 0; i < n; ++i) {
            result[2 * i] = nums[i];
            result[2 * i + 1] = nums[n + i];
        }
        return result;
    }
}
