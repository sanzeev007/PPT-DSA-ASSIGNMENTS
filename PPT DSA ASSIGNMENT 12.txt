QUESTION 1


class DeleteMiddle {

static class Node {
		int data;
		Node next;
	}

	static Node deleteMid(Node head)
	{
		// Base cases
		if (head == null)
			return null;
		if (head.next == null) {
			return null;
		}

		Node slow_ptr = head;
		Node fast_ptr = head;

		Node prev = null;

		while (fast_ptr != null && fast_ptr.next != null) {
			fast_ptr = fast_ptr.next.next;
			prev = slow_ptr;
			slow_ptr = slow_ptr.next;
		}

		
		prev.next = slow_ptr.next;

		return head;
	}

	static void printList(Node ptr)
	{
		while (ptr != null) {
			System.out.print(ptr.data + "->");
			ptr = ptr.next;
		}
		System.out.println("NULL");
	}

	
	static Node newNode(int data)
	{
		Node temp = new Node();
		temp.data = data;
		temp.next = null;
		return temp;
	}

}








QUESTION 2


class Solution {

  ListNode *floydcycle(ListNode *head)
  {
      if(head==NULL)
      {return NULL;}

      ListNode *slow=head;
      ListNode *fast=head;
      
      while(slow!=NULL && fast!=NULL)
      {
          fast=fast->next;
          if(fast!=NULL)
          fast=fast->next;
          slow=slow->next;
          if(slow==fast)
          return slow;
      }
      return NULL;

  }
    bool hasCycle(ListNode *head) {
     return floydcycle(head);
    }
}









QUESTION 3


class Solution {
static void printNthFromLast(Node head, int N)
{
    int i = 0;
 
    if (head == null)
        return;
    printNthFromLast(head.next, N);
 
    if (++i == N)
        System.out.print(head.data);
}
}









QUESTION 4



class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head, fast = head, prev, temp;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        prev = slow;
        slow = slow.next;
        prev.next = null;
        while (slow != null) {
            temp = slow.next;
            slow.next = prev;
            prev = slow;
            slow = temp;
        }
        fast = head;
        slow = prev;
        while (slow != null) {
            if (fast.val != slow.val) return false;
            fast = fast.next;
            slow = slow.next;
        }
        return true;
    }
}








QUESTION 5


public class Solution {
    public ListNode detectCycle(ListNode head) {
  HashSet<ListNode> nodesSeen = new HashSet<>();
        
     ListNode node = head;
        while (node != null) {
      
            if (nodesSeen.contains(node)) {
                return node;
            } else {
              
                nodesSeen.add(node);
                node = node.next;
            }
        }

      return null;
    }
}








QUESTION 6


class Solution
{

static class Node
{
	int data;
	Node next;
}

static Node push( Node head_ref, int new_data)
{
	
	Node new_node = new Node();

	
	new_node.data = new_data;

	new_node.next = (head_ref);

	
	(head_ref) = new_node;
	
	return head_ref;
}

static void printList( Node head)
{
	Node temp = head;
	while (temp != null)
	{
		System.out.printf("%d ", temp.data);
		temp = temp.next;
	}
	System.out.printf("\n");
}

// Function to skip M nodes and then

static void skipMdeleteN( Node head, int M, int N)
{
	Node curr = head, t;
	int count;

	while (curr!=null)
	{
		
		for (count = 1; count < M && curr != null; count++)
			curr = curr.next;

		if (curr == null)
			return;

		
		t = curr.next;
		for (count = 1; count <= N && t != null; count++)
		{
			Node temp = t;
			t = t.next;
		}
	
		curr.next = t;

		curr = t;
	}
}

}









QUESTION 7



class LinkedList
{
	Node head;
	class Node
	{
		int data;
		Node next;
		Node(int d) {data = d; next = null; }
	}

	void push(int new_data)
	{
		
		Node new_node = new Node(new_data);

		new_node.next = head;

		head = new_node;
	}

	void merge(LinkedList q)
	{
		Node p_curr = head, q_curr = q.head;
		Node p_next, q_next;

		while (p_curr != null && q_curr != null) {

			p_next = p_curr.next;
			q_next = q_curr.next;

			q_curr.next = p_next;
			p_curr.next = q_curr; 

			p_curr = p_next;
			q_curr = q_next;
		}
		q.head = q_curr;
	}

	
	void printList()
	{
		Node temp = head;
		while (temp != null)
		{
		System.out.print(temp.data+" ");
		temp = temp.next;
		}
		System.out.println();
	}

}







QUESTION 8



public class LinkedList {
    private static class Node {
        public int data;
        public Node next;
  
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }
  
    private Node head;
  
    public LinkedList() {
        head = null;
    }
  
    public void addToFront(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }
  
    public boolean isCircular() {
        if (head == null) {
            return false;
        }
        Node slow = head;
        Node fast = head.next;
        while (fast != null && fast.next != null) {
            if (slow == fast) {
                return true;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        return false;
    }
  
