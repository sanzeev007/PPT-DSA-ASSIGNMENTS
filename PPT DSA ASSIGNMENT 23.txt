QUESTION 1




class Solution {

	static class Node {
		int key;
		Node left;
		Node right;
	}

	static Node newNode(int key)
	{
		Node temp = new Node();
		temp.key = key;
		temp.left = temp.right = null;
		return temp;
	}

	
	public static int height(Node root)
	{

		Queue<Node> q = new LinkedList<Node>();
		q.add(root);
		int height = 0;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				Node temp = q.poll();
				if (temp.left != null) {
					q.add(temp.left);
				}
				if (temp.right != null) {
					q.add(temp.right);
				}
			}
			height++;
		}
		return height;
	}

}








QUESTION 2


class Node {
    int data;
    Node left, right;
 
    public Node(int item)
    {
        data = item;
        left = right = null;
    }
}
 

class BinaryTree {
    Node root;
    static int max_level = 0;
 
   
    void leftViewUtil(Node node, int level)
    {
        // Base Case
        if (node == null)
            return;
 
    
        if (max_level < level) {
            System.out.print(node.data + " ");
            max_level = level;
        }
 
   
        leftViewUtil(node.left, level + 1);
        leftViewUtil(node.right, level + 1);
    }
 
  
    void leftView()
    {
        max_level = 0;
        leftViewUtil(root, 1);
    }
 









QUESTION 3



 tree node
class Node {
 
    int data;
    Node left, right;
 
    Node(int item)
    {
        data = item;
        left = right = null;
    }
}
 

class Max_level {
 
    int max_level;
}
 
class BinaryTree {
 
    Node root;
    Max_level max = new Max_level();
 
    void rightViewUtil(Node node, int level,
                       Max_level max_level)
    {
 
  
        if (node == null)
            return;
 
        if (max_level.max_level < level) {
            System.out.print(node.data + " ");
            max_level.max_level = level;
        }
 
     
        rightViewUtil(node.right, level + 1, max_level);
        rightViewUtil(node.left, level + 1, max_level);
    }
 
    void rightView() { rightView(root); }
 
   
    void rightView(Node node)
    {
 
        rightViewUtil(node, 1, max);
    }
 











QUESTION 4



class Solution
{

  static class Node
  {
	 int data;
	 int hd;
 
 Node left, right;
 
   Node(int key)
    {
      data = key;
      hd = Integer.MAX_VALUE;
      left = right = null;
    }
  }
 
  static class pair {
    Node first;
    int second;
    pair(Node f, int s)
    {
      first = f;
      second = s;
    }
  }
 
  static void printBottomView(Node root)
  {
    if (root == null)
      return; 
    HashMap<Integer, Integer> hash= new HashMap<>();
    int leftmost = 0; 
   
    Queue<pair> q= new ArrayDeque<>(); 
    
 
    q.add(new pair(root, 0));
    while (!q.isEmpty()) {
      pair top = q.peek(); 
   
      q.remove();
      Node temp= top.first
     
      int ind = top.second; 
    
      hash.put(ind,
               temp.data);
   
      leftmost = Math.min(
        ind, leftmost); 
  
      if (temp.left != null) {
        q.add(new pair(temp.left, ind - 1));
      }
      if (temp.right != null) {
        q.add(new pair(temp.right, ind + 1));
      } 
    }
  
    while (hash.containsKey(leftmost)) {
      System.out.print(
        hash.getOrDefault(leftmost++, 0) + " ");
    }
  }
 

