QUESTION 1



public class MergeKSortedLists {

	
	public static Node SortedMerge(Node a, Node b)
	{
		Node result = null;
		
		if (a == null)
			return b;
		else if (b == null)
			return a;

		
		if (a.data <= b.data) {
			result = a;
			result.next = SortedMerge(a.next, b);
		}
		else {
			result = b;
			result.next = SortedMerge(a, b.next);
		}

		return result;
	}

	
	public static Node mergeKLists(Node arr[], int last)
	{
		while (last != 0) {
			int i = 0, j = last;

			
			while (i < j) {
				
				arr[i] = SortedMerge(arr[i], arr[j]);

				
				i++;
				j--;

				if (i >= j)
					last = j;
			}
		}

		return arr[0];
	}

	
	public static void printList(Node node)
	{
		while (node != null) {
			System.out.print(node.data + " ");
			node = node.next;
		}
	}

	public static void main(String args[])
	{
		int k = 3;
		int n = 4; 

		
		Node arr[] = new Node[k];

		arr[0] = new Node(1);
		arr[0].next = new Node(3);
		arr[0].next.next = new Node(5);
		arr[0].next.next.next = new Node(7);

		arr[1] = new Node(2);
		arr[1].next = new Node(4);
		arr[1].next.next = new Node(6);
		arr[1].next.next.next = new Node(8);

		arr[2] = new Node(0);
		arr[2].next = new Node(9);
		arr[2].next.next = new Node(10);
		arr[2].next.next.next = new Node(11);

		
		Node head = mergeKLists(arr, k - 1);
		printList(head);
	}
}

class Node {
	int data;
	Node next;
	Node(int data) { this.data = data; }
}









QUESTION 2



public class Solution {
    class Node {
        Node left, right;
        int val, sum, dup = 1;
        public Node(int v, int s) {
            val = v;
            sum = s;
        }
    }
    public List<Integer> countSmaller(int[] nums) {
        Integer[] ans = new Integer[nums.length];
        Node root = null;
        for (int i = nums.length - 1; i >= 0; i--) {
            root = insert(nums[i], root, ans, i, 0);
        }
        return Arrays.asList(ans);
    }
    private Node insert(int num, Node node, Integer[] ans, int i, int preSum) {
        if (node == null) {
            node = new Node(num, 0);
            ans[i] = preSum;
        } else if (node.val == num) {
            node.dup++;
            ans[i] = preSum + node.sum;
        } else if (node.val > num) {
            node.sum++;
            node.left = insert(num, node.left, ans, i, preSum);
        } else {
            node.right = insert(num, node.right, ans, i, preSum + node.dup + node.sum);
        }
        return node;
    }
}











QUESTION 3




class Solution {
    private void swap(int[] arr, int index1, int index2) {
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }
    
  
    private void heapify(int[] arr, int n, int i) {
       
        int largest = i; 
        int left = 2 * i + 1;
        int right = 2 * i + 2; 

   
        if (left < n && arr[left] > arr[largest]) {
            largest = left;
        }

    
        if (right < n && arr[right] > arr[largest]) {
            largest = right;
        }

    
        if (largest != i) {
            swap(arr, i, largest); 
            heapify(arr, n, largest);
        }
    }

    private void heapSort(int[] arr) {
        int n = arr.length;
   
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }

     
        for (int i = n - 1; i >= 0; i--) {
            swap(arr, 0, i);
          
            heapify(arr, i, 0);
        }
    }

    public int[] sortArray(int[] nums) {
        heapSort(nums);
        return nums;
    }
}












QUESTION 4




public class Solution {
	public static void main(String[] args)
	{
		int[] A = { 5, 6, 0, 4, 6, 0, 9, 0, 8 };
		int n = A.length;
		int[] B = new int[n];
		int j = 0;
		int count = 0;
		for (int i = 0; i < n; i++) {
			if (A[i] != 0) {
				B[j] = A[i];
				j++;
			}
			else {
				count++;
			}
		}
		while (count > 0) {
			B[j] = 0;
			count--;
			j++;
		}
		for (int i = 0; i < n; i++) {
			A[i] = B[i];
		}

		for (int i = 0; i < n; i++) {
			System.out.print(A[i] + " ");
		}
	}
}













QUESTION 5




class RearrangeArray {
	
	void rightrotate(int arr[], int n, int outofplace,
					int cur)
	{
		int tmp = arr[cur];
		for (int i = cur; i > outofplace; i--)
			arr[i] = arr[i - 1];
		arr[outofplace] = tmp;
	}

	void rearrange(int arr[], int n)
	{
		int outofplace = -1;

		for (int index = 0; index < n; index++) {
			if (outofplace >= 0) {
				
				if (((arr[index] >= 0)
					&& (arr[outofplace] < 0))
					|| ((arr[index] < 0)
						&& (arr[outofplace] >= 0))) {
					rightrotate(arr, n, outofplace, index);

					if (index - outofplace >= 2)
						outofplace = outofplace + 2;
					else
						outofplace = -1;
				}
			}

			
			if (outofplace == -1) {
				
				if (((arr[index] >= 0)
					&& ((index & 0x01) == 0))
					|| ((arr[index] < 0)
						&& (index & 0x01) == 1))
					outofplace = index;
			}
		}
	}

	
	void printArray(int arr[], int n)
	{
		for (int i = 0; i < n; i++)
			System.out.print(arr[i] + " ");
		System.out.println("");
	}

	public static void main(String[] args)
	{
		RearrangeArray rearrange = new RearrangeArray();
		
		int arr[] = { -5, -2, 5, 2, 4, 7, 1, 8, 0, -8 };
		int n = arr.length;

		System.out.println("Given array is ");
		rearrange.printArray(arr, n);

		rearrange.rearrange(arr, n);

		System.out.println("RearrangeD array is ");
		rearrange.printArray(arr, n);
	}
}










QUESTION 6




public class Solution {
	
	
	static void mergeArrays(int a[], int b[], int n, int m)
	{
	
		Map<Integer,Boolean> mp = new TreeMap<Integer,Boolean>();
	
		for(int i = 0; i < n; i++)
		{
			mp.put(a[i], true);
		}
		for(int i = 0;i < m;i++)
		{
			mp.put(b[i], true);
		}
	
		for (Map.Entry<Integer,Boolean> me : mp.entrySet())
		{
			System.out.print(me.getKey() + " ");
		}
	}
	

	public static void main (String[] args)
	{
		int a[] = {1, 3, 5, 7}, b[] = {2, 4, 6, 8};
		int size = a.length;
		int size1 = b.length;
		
	
		mergeArrays(a, b, size, size1);
	}
}











QUESTION 7



class Solution {
  
    public static void printUnion(int[] arr1, int[] arr2, int m, int n) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        int i = 0;
        int j = 0;
        while (i < m && j < n) {
            if (arr1[i] < arr2[j]) {
                System.out.println(arr1[i]);
                i += 1;
            } else if (arr2[j] < arr1[i]) {
                System.out.println(arr2[j]);
                j += 1;
            } else {
                System.out.println(arr2[j]);
                j += 1;
                i += 1;
            }
        }
       
        while (i < m) {
            System.out.println(arr1[i]);
            i += 1;
        }
        while (j < n) {
            System.out.println(arr2[j]);
            j += 1;
        }
    }
public static void printIntersection(int[] arr1, int[] arr2, int m, int n) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        int i = 0;
        int j = 0;
        while (i < m && j < n) {
            if (arr1[i] < arr2[j]) {
                i += 1;
            } else if (arr2[j] < arr1[i]) {
                j += 1;
            } else {
                System.out.println(arr2[j]);
                j += 1;
                i += 1;
            }
        }
    }










QUESTION 8


class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set1 = new HashSet<>();
        for (int i : nums1) {
            set1.add(i);
        }
        Set<Integer> set2 = new HashSet<>();
        for (int i : nums2) {
            set2.add(i);
        }
     
        Set<Integer> Main_Set = new HashSet<>();
        for (Integer var : set1) {
            if (set2.contains(var)) {
                Main_Set.add(var);
            }
        }
        int[] arr = new int[Main_Set.size()];
        int j = 0;
        for (Integer val : Main_Set) {
            arr[j] = val.intValue();
            j++;
        }
        return arr;
    }
}