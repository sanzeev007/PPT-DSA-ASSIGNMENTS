QUESTION 1

class Solution {
    public int[] diStringMatch(String S) {
        int N = S.length();
        int lo = 0, hi = N;
        int[] ans = new int[N + 1];
        for (int i = 0; i < N; ++i) {
            if (S.charAt(i) == 'I')
                ans[i] = lo++;
            else
                ans[i] = hi--;
        }

        ans[N] = lo;
        return ans;
    }
}






QUESTION 2

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m=matrix.length;
        int n=matrix[0].length;

    // binnary implementation
        int low=0,high=m*n-1;
        while(low<=high) {
            int midIdx,midEle,rowIdx,colIdx;
            
            midIdx=low+(high-low)/2;
            rowIdx=midIdx/n;
            colIdx=midIdx%n;
            midEle=matrix[rowIdx][colIdx];
            if(midEle==target)
            return true;
            else if(midEle<target)
            low=midIdx+1;
            else 
            high=midIdx-1;
        }
        return false;
        
    }
}





QUESTION 3

class Solution {
 static Boolean isMountainArray(int arr[])
{
    if (arr.length < 3)
        return false;
    int flag = 0, i = 0;
    for (i = 1; i < arr.length; i++)
        if (arr[i] <= arr[i - 1])
            break;
 
    if (i == arr.length || i == 1)
        return false;
 
    for (; i < arr.length; i++)
        if (arr[i] >= arr[i - 1])
            break;
    return i == arr.length;
}







QUESTION 4

public class Solution {

    public int findMaxLength(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        int maxlen = 0, count = 0;
        for (int i = 0; i < nums.length; i++) {
            count = count + (nums[i] == 1 ? 1 : -1);
            if (map.containsKey(count)) {
                maxlen = Math.max(maxlen, i - map.get(count));
            } else {
                map.put(count, i);
            }
        }
        return maxlen;
    }
}








QUESTION 5

class Solution {
   static long minValue(int A[], int B[], int n)
    {
       
        Arrays.sort(A);
        Arrays.sort(B);
 
       
        long result = 0;
        for (int i = 0; i < n; i++)
            result += (A[i] * B[n - i - 1]);
 
        return result;
    }







QUESTION 6

class Solution {
    
    public int[] findOriginalArray(int[] changed) {
        int n = changed.length, j = 0;
       
        if (n % 2 == 1) return new int[]{};
        int[] ans = new int[n / 2];
       
        int[] cnt = new int[200005];
      
        for (int x : changed) cnt[x] += 1;
        
        for (int i = 0; i < 200005; i++) {
           
            if (cnt[i] > 0) {
                cnt[i] -= 1;
               if (cnt[i * 2] > 0) {
                    cnt[i * 2] -= 1;
                    
                    ans[j++] = i--;
                } else {
                    // cannot pair up, return []
                    return new int[]{};
                }
            }
        }
        return ans;
    }
}






QUESTION 7

class Solution {
    public int[][] generateMatrix(int n) {
        int[][] result = new int[n][n];
        int cnt = 1;
        int dir[][] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int d = 0;
        int row = 0;
        int col = 0;
        while (cnt <= n * n) {
            result[row][col] = cnt++;
            int r = Math.floorMod(row + dir[d][0], n);
            int c = Math.floorMod(col + dir[d][1], n);

            // change direction if next cell is non zero
            if (result[r][c] != 0) d = (d + 1) % 4;

            row += dir[d][0];
            col += dir[d][1];
        }
        return result;
    }
}






QUESTION 8

class Solution {
    public int[][] multiply(int[][] mat1, int[][] mat2) {
        int r1 = mat1.length, c1 = mat1[0].length, c2 = mat2[0].length;
        int[][] res = new int[r1][c2];
        Map<Integer, List<Integer>> mp = new HashMap<>();
        for (int i = 0; i < r1; ++i) {
            for (int j = 0; j < c1; ++j) {
                if (mat1[i][j] != 0) {
                    mp.computeIfAbsent(i, k -> new ArrayList<>()).add(j);
                }
            }
        }
        for (int i = 0; i < r1; ++i) {
            for (int j = 0; j < c2; ++j) {
                if (mp.containsKey(i)) {
                    for (int k : mp.get(i)) {
                        res[i][j] += mat1[i][k] * mat2[k][j];
                    }
                }
            }
        }
        return res;
    }
}