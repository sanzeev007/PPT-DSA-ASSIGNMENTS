QUESTION 1


class Solution
{

static class Node
{
	int data;
	Node next;
};

static Node insert(Node root, int item)
{
	Node ptr, temp;
	temp = new Node();
	temp.data = item;
	temp.next = null;

	if (root == null)
		root = temp;
	else {
		ptr = root;
		while (ptr.next != null)
			ptr = ptr.next;

		ptr.next = temp;
	}
	return root;
}


static Node newList(Node root1, Node root2)
{
	Node ptr1 = root1, ptr2 = root2, ptr;
	Node root = null, temp;

	while (ptr1 != null) {
		temp = new Node();
		temp.next = null;

		
		if (ptr1.data < ptr2.data)
			temp.data = ptr2.data;
		else
			temp.data = ptr1.data;

		if (root == null)
			root = temp;
		else {
			ptr = root;
			while (ptr.next != null)
				ptr = ptr.next;

			ptr.next = temp;
		}
		ptr1 = ptr1.next;
		ptr2 = ptr2.next;
	}
	return root;
}

static void display(Node root)
{
	while (root != null)
	{
		System.out.print( root.data + "->");
		root = root.next;
	}
	System.out.println();
}

}









QUESTION 2


class LinkedList {
	
	Node head;
	
	class Node {
		int data;
		Node next;
		Node(int d)
		{
			data = d;
			next = null;
		}
	}

	void removeDuplicates()
	{
		
		Node temp = head, prev = head;

		
		while (temp != null) {

	if (temp.data != prev.data) {
			
				prev.next = temp;
				prev = temp;
			}
			
			temp = temp.next;
		}
		
		if (prev != temp)
			prev.next = null;
	}

	public void push(int new_data)
	{
		
		Node new_node = new Node(new_data);
		
		new_node.next = head;
		
		head = new_node;
	}

	void printList()
	{
		Node temp = head;
		while (temp != null) {
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
		System.out.println();
	}

}









QUESTION 3


class Node {
    int data;
    Node next;
    Node(int a)
    {
        data = a;
        next = null;
    }
}
  
class Solution {
  
    static Node push(Node head, int val)
    {
        Node newNode = new Node(val);
        if (head == null) {
            head = newNode;
            return head;
        }
  
        Node temp = head;
        while (temp.next != null)
            temp = temp.next;
  
        temp.next = newNode;
        return head;
    }
 
    static Node reverse(Node head, int k)
    {
    
        if (head == null || head.next == null)
            return head;
  
        Node dummy = new Node(-1);
        dummy.next = head;
  
        Node prev = dummy;
        Node curr = dummy;
        Node next = dummy;
  
        int count = 0;
        while (curr != null) {
            count++;
            curr = curr.next;
        }
 
        while (next != null) {
            curr = prev.next;
                          
            next = curr.next; 
                        
            int toLoop
                = count > k
                      ? k
                      : count - 1; 
            for (int i = 1; i < toLoop; i++) {
        
                curr.next = next.next;
                next.next = prev.next;
                prev.next = next;
                next = curr.next;
            }
            prev = curr;
            count -= k;
        }
        return dummy.next; 
                         
    }
   
    static void print(Node head)
    {
        while (head.next != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        System.out.println(head.data);
    }
  







QUESTION 4


class LinkedList {
 
    static Node head;
 
    class Node {
 
        int data;
        Node next;
 
        Node(int d) {
            data = d;
            next = null;
        }
    }
 
 
    Node kAltReverse(Node head, int k) {
        return _kAltReverse(head, k, true);
    }
 
    Node _kAltReverse(Node node, int k, boolean b) {
        if (node == null) {
            return null;
        }
 
        int count = 1;
        Node prev = null;
        Node current = node;
        Node next = null;
 
     
        while (current != null && count <= k) {
            next = current.next;
 
            if (b == true) {
                current.next = prev;
            }
 
            prev = current;
            current = next;
            count++;
        }
 
       
        if (b == true) {
            node.next = _kAltReverse(current, k, !b);
            return prev;
        } else {
            prev.next = _kAltReverse(current, k, !b);
            return node;
        }
    }
 
    void printList(Node node) {
        while (node != null) {
            System.out.print(node.data + " ");
            node = node.next;
        }
    }
 
    void push(int newdata) {
        Node mynode = new Node(newdata);
        mynode.next = head;
        head = mynode;







QUESTION 5


class Solution 
{

static class Node 
{ 
    int data; 
    Node next; 
}; 
  
// Function to delete the last occurrence 
static void deleteLast(Node head, int x) 
{ 
    Node temp = head, ptr = null; 
    while (temp!=null) 
    { 
 
        if (temp.data == x) 
            ptr = temp;     
        temp = temp.next; 
    } 

    if (ptr != null && ptr.next == null) 
    { 
        temp = head; 
        while (temp.next != ptr) 
            temp = temp.next; 
        temp.next = null; 
    } 
 
    if (ptr != null && ptr.next != null)
    { 
        ptr.data = ptr.next.data; 
        temp = ptr.next; 
        ptr.next = ptr.next.next; 
        System.gc();
    } 
} 

static Node newNode(int x) 
{ 
    Node node = new Node(); 
    node.data = x; 
    node.next = null; 
    return node; 
} 

static void display(Node head) 
{ 
    Node temp = head; 
    if (head == null) 
    { 
        System.out.print("null\n"); 
        return; 
    } 
    while (temp != null) 
    { 
        System.out.printf("%d --> ", temp.data); 
        temp = temp.next; 
    } 
    System.out.print("null\n"); 
} 
  






QUESTION 6


class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        if(list1!=null && list2!=null){
        if(list1.val<list2.val){
            list1.next=mergeTwoLists(list1.next,list2);
            return list1;
            }
            else{
                list2.next=mergeTwoLists(list1,list2.next);
                return list2;
        }
        }
        if(list1==null)
            return list2;
        return list1;
    }
}



.




QUESTION 7


class Node {
    int data;
    Node prev;
    Node next;
}
 
class Main {
    static void reverse(Node[] head_ref)
    {
        Node current = head_ref[0];
        Node temp = null;
         
        while (current != null) {
            temp = current.prev;
            current.prev = current.next;
            current.next = temp;
            current = current.prev;
        }
     
        if (temp != null) {
            head_ref[0] = temp.prev;
        }
    }
     
    static void printList(Node node) {
        while (node != null) {
            System.out.print(node.data + " ");
            node = node.next;
        }
    }








QUESTION 8


class Node
{
    int data;
    Node next, prev;
}
 
class Solution
{
    static Node head = null;
 
    static Node deleteNode(Node del)
    {

        if (head == null || del == null)
            return null;
 
   
        if (head == del)
            head = del.next;
 
        if (del.next != null)
            del.next.prev = del.prev;
 
        if (del.prev != null)
            del.prev.next = del.next;
 
        del = null;
 
        return head;
    }
 
  
    static void deleteNodeAtGivenPos(int n)
    {
    
        if (head == null || n <= 0)
            return;
 
        Node current = head;
        int i;
 
        for (i = 1; current != null && i < n; i++)
        {
            current = current.next;
        }
 
        if (current == null)
            return;
 
     
        deleteNode(current);
    }

    static void push(int new_data)
    {
  
        Node new_node = new Node();

        new_node.data = new_data;
 
 
        new_node.prev = null;
 
        new_node.next = head;
 
        if (head != null)
            head.prev = new_node;
 
        head = new_node;
    }
 
    static void printList()
    {
        Node temp = head;
        if (temp == null)
            System.out.print("Doubly Linked list empty");
 
        while (temp != null)
        {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }